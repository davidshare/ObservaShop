services:
  kong:
    image: kong:3.9.1-ubuntu
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/kong.yml
      - KONG_JWT_SECRET=${KONG_JWT_SECRET}
    env_file: .env
    volumes:
      - ./gateway/kong/kong.yml:/kong/kong.yml
      - ./gateway/kong/plugins:/kong/plugins
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - observashop-network

  redis:
    image: redis:8.2.0
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - observashop-network
  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    env_file: .env
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    volumes:
      # - ./minio/minio-config.yaml:/etc/minio/config.yaml
      - minio-data:/data
    networks:
      - observashop-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
  kafka:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: x5BLWJITiM0HSEgBDDkwbg==
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - observashop-network
  postgres-auth:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_AUTH_USER}
      - POSTGRES_PASSWORD=${POSTGRES_AUTH_PASSWORD}
      - POSTGRES_DB=auth
    env_file: .env
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
      - ./databases/auth/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5433:5432"
    networks:
      - observashop-network
  postgres-authz:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_AUTHZ_USER}
      - POSTGRES_PASSWORD=${POSTGRES_AUTHZ_PASSWORD}
      - POSTGRES_DB=authz
    env_file: .env
    volumes:
      - postgres-authz-data:/var/lib/postgresql/data
      - ./databases/authz/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5434:5432"
    networks:
      - observashop-network
  postgres-product:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_PRODUCT_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PRODUCT_PASSWORD}
      - POSTGRES_DB=product
    env_file: .env
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
      - ./databases/product/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5435:5432"
    networks:
      - observashop-network
  postgres-order:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_ORDER_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ORDER_PASSWORD}
      - POSTGRES_DB=orders
    env_file: .env
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
      - ./databases/order/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5436:5432"
    networks:
      - observashop-network
  postgres-payment:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_PAYMENT_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PAYMENT_PASSWORD}
      - POSTGRES_DB=payment
    env_file: .env
    volumes:
      - postgres-payment-data:/var/lib/postgresql/data
      - ./databases/payment/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5437:5432"
    networks:
      - observashop-network
  postgres-notification:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_NOTIFICATION_USER}
      - POSTGRES_PASSWORD=${POSTGRES_NOTIFICATION_PASSWORD}
      - POSTGRES_DB=notification
    env_file: .env
    volumes:
      - postgres-notification-data:/var/lib/postgresql/data
      - ./databases/notification/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5438:5432"
    networks:
      - observashop-network
  postgres-media:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_MEDIA_USER}
      - POSTGRES_PASSWORD=${POSTGRES_MEDIA_PASSWORD}
      - POSTGRES_DB=media
    env_file: .env
    volumes:
      - postgres-media-data:/var/lib/postgresql/data
      - ./databases/media/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5439:5432"
    networks:
      - observashop-network
  postgres-analytics:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_ANALYTICS_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ANALYTICS_PASSWORD}
      - POSTGRES_DB=analytics
    env_file: .env
    volumes:
      - postgres-analytics-data:/var/lib/postgresql/data
      - ./databases/analytics/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    ports:
      - "5430:5432"
    networks:
      - observashop-network
volumes:
  redis-data:
  minio-data:
  kafka-data:
  postgres-auth-data:
  postgres-authz-data:
  postgres-product-data:
  postgres-order-data:
  postgres-payment-data:
  postgres-notification-data:
  postgres-media-data:
  postgres-analytics-data:
networks:
  observashop-network:
    driver: bridge
